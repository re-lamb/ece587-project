
0000_0000_0000_0000		nop                     PC -> PC + 2                        // nop
0000_0000_0000_0001		clrt                    0 -> T                              // clear T
0000_0000_0000_0010		sett                    1 -> T                              // set T
0000_0000_0000_0011		nott                    ~T -> T                             // invert T
0000_0000_0000_0100		rts                     A0 + 2 > PC                         // return from subroutine
0000_0000_0000_0101		rte                     EPC -> PC                           // return from exception
0000_0000_0000_0110		intc                    0 -> int_en                         // disable interrupt
0000_0000_0000_0111		ints                    1 -> int_en                         // enable interrupt
0000_0000_0000_1000		ebreak                                                      // sim breakpoint
0000_0000_0000_1001		exit                                                        // sim exit

0001_0mmm_0000_0000		movt    Dm              T -> Dm                             // move T to D-reg
0001_0mmm_0000_0001		dt      Dm              Dm - 1 -> Dm, (Dm == 0) -> T        // decrement and test
0001_0mmm_0000_0010		dt      Am              Am - 1 -> Am, (Am == 0) -> T        // decrement and test
0001_0mmm_0000_0011		braf    Am              Am + PC -> PC                       // branch far
0001_0mmm_0000_0100		bsrf    Am              PC -> A0, Am + PC -> PC             // branch subroutine far
0001_0mmm_0000_0101		jmp     Am              Am -> PC                            // jump
0001_0mmm_0000_0110		jsr     Am              PC -> A0, Am -> PC                  // jump subroutine
0001_0mmm_0000_0111		sgz     Dm              (Dm > 0) -> T                       // set greater than zero
0001_0mmm_0000_1000		sgzu    Dm              (Dm(unsigned) > 0) -> T             // set greater than zero unsigned

0010_0mmm_0nnn_0000		mov     Dn,Dm           Dn -> Dm                            // reg-reg move (D->D)
0010_0mmm_0nnn_0001		mova    Dn,Am           Dn -> Am                            // reg-reg move (D->A)
0010_0mmm_0nnn_0010		mova    An,Am           An -> Am                            // reg-reg move (A->A)
0010_0mmm_0nnn_0011		mov     An,Dm           An -> Dm                            // reg-reg move (A->D)
0010_0mmm_0nnn_0100		ld.b    @An,Dm          (An) -> zero ext. -> Dm             // 8-bit zero ext. load
0010_0mmm_0nnn_0101		ld.w    @An,Dm          (An) -> zero ext. -> Dm             // 16-bit zero ext. load
0010_0mmm_0nnn_0111		st.b    Dn,@Am          Dn -> (Am)                          // 8-bit store
0010_0mmm_0nnn_1000		st.w    Dn,@Am          Dn -> (Am)                          // 16-bit store

0010_0mmm_0nnn_1010		add     Dn,Dm           Dn + Dm -> Dm                       // D-D add
0010_0mmm_0nnn_1011		addc    Dn,Dm           Dn + Dm + T -> Dm, c -> T           // add with carry
0010_0mmm_0nnn_1100		addv    Dn,Dm           Dn + Dm -> Dm, v -> T               // add and set overflow
0010_0mmm_0nnn_1101		adda    An,Am           An + Am -> Am                       // A-A add
0010_0mmm_0nnn_1110		adda    Dn,Am           Dn + Am -> Am                       // D-A add
0010_0mmm_0nnn_1111		sub     Dn,Dm           Dm - Dn -> Dm                       // sub
0010_0mmm_1nnn_0000		subc    Dn,Dm           Dm - Dn - T -> Dm, c -> T           // sub with borrow
0010_0mmm_1nnn_0001		subv    Dn,Dm           Dm - Dn -> Dn, v -> T               // sub and set underflow
0010_0mmm_1nnn_0010		suba    An,Am           Am - An -> Am                       // A-A sub
0010_0mmm_1nnn_0011		suba    Dn,Am           Am - Dn -> Am                       // D-A sub
0010_0mmm_1nnn_0100		and     Dn,Dm           Dm & Dn -> Dm                       // and
0010_0mmm_1nnn_0101		tst     Dn,Dm           (Dm & Dn == 0) -> T                 // D-D test
0010_0mmm_1nnn_0110		neg     Dn,Dm           0 - Dn -> Dm                        // twos comp. negate
0010_0mmm_1nnn_0111		negc    Dn,Dm           0 - Dn - T -> Dm, c -> T            // twos comp. negate with borrow
0010_0mmm_1nnn_1000		not     Dn,Dm           ~Dn -> Dm                           // not
0010_0mmm_1nnn_1001		or      Dn,Dm           Dm | Dn -> Dm                       // or
0010_0mmm_1nnn_1010		xor     Dn,Dm           Dm ^ Dn -> Dm                       // xor
0010_0mmm_1nnn_1011		seq     Dn,Dm           (Dm == Dn) -> T                     // set equal
0010_0mmm_1nnn_1100		sge     Dn,Dm           (Dn >= Dm) -> T                     // set greater/equal
0010_0mmm_1nnn_1101		sgeu    Dn,Dm           unsigned(Dn >= Dm) -> T             // set greater/equal unsigned
0010_0mmm_1nnn_1110		sgt     Dn,Dm           (Dn > Dm) -> T                      // set greater
0010_0mmm_1nnn_1111		sgtu    Dn,Dm           unsigned(Dn > Dm) -> T              // set greater unsigned

0010_1mmm_0nnn_0000		exts.b  Dn,Dm           Dn sign ext. from byte -> Dm        // sign ext. byte mov
0010_1mmm_0nnn_0010		extu.b  Dn,Dm           Dn zero ext. from byte -> Dm        // zero ext. byte mov
0010_1mmm_0nnn_0100		sll     Dn,Dm           (Dm << Dn) -> Dm                    // shift left logical
0010_1mmm_0nnn_0101		srl     Dn,Dm           ((Dm << Dn)zero ext.) -> Dm         // shift right logical
0010_1mmm_0nnn_0110		sra     Dn,Dm           ((Dm >> Dn)sign ext.) -> Dm         // shift right arithmetic
0010_1mmm_0nnn_0111		rot     Dn,Dm           (Dm rot Dn) -> Dm                   // rotate right

0010_1mmm_0nnn_1001		mul   	Dn,Dm           Dm * Dn -> Dm(low 16b)              // 16 bit mul    
0010_1mmm_0nnn_1100		div   	Dn,Dm           Dm / Dn -> Dm(high 16b)             // 16 bit div   
0010_1mmm_1nnn_0101		mod   	Dn,Dm           Dm % Dn -> Dm(low 16b)              // 16 bit remainder	

0010_1mmm_1nnn_1000		bclr    Dn,Dm		0 -> Dm[Dn]                         // bit clear
0010_1mmm_1nnn_1001		bset    Dn,Dm		1 -> Dm[Dn]                         // bit set
0010_1mmm_1nnn_1010		bnot    Dn,Dm		~Dm[Dn] -> Dm[Dn]                   // bit flip
0010_1mmm_1nnn_1011		btst    Dn,Dm		Dm[Dn] -> T                         // bit test
	
0011_0mmm_s000_iiii		bclri   #imm5,Dm        0 -> Dm[imm]                        // bit clear
0011_0mmm_s001_iiii		bseti   #imm5,Dm        1 -> Dm[imm]                        // bit set
0011_0mmm_s010_iiii		bnoti   #imm5,Dm        ~Dm[imm] -> Dm[imm]                 // bit flip
0011_0mmm_s011_iiii		btsti   #imm5,Dm        Dm[imm] -> T                        // bit test
0011_0mmm_s100_iiii		slli    #imm5,Dm        (Dm << imm) -> Dm                   // shift left logical imm.
0011_0mmm_s101_iiii		srli    #imm5,Dm        ((Dm << imm)zero ext.) -> Dm        // shift right logical imm.
0011_0mmm_s110_iiii		srai    #imm5,Dm        ((Dm >> imm)sign ext.) -> Dm        // shift right arithmetic imm.
0011_0mmm_s111_iiii		roti    #imm5,Dm        (Dm rot imm) -> Dm                  // rotate right imm
	
0100_0mmm_snnn_iiii		lda     @(disp,An),Am   (disp*2 + An) -> Am                 // load an address
0100_1mmm_snnn_iiii		sta     Am,@(disp,An)   Am -> (disp*2 + An)                 // store an address
0101_0mmm_snnn_iiii		ld.b    @(disp,An),Dm   (disp + An) -> zero ext. -> Dm      // 8-bit load w/ disp.
0101_1mmm_snnn_iiii		st.b    Dm,@(disp,An)   Dm -> (disp + An)                   // 8-bit store w/ disp.
0110_0mmm_snnn_iiii		ld.w    @(disp,An),Dm   (disp*2 + An) -> zero ext. -> Dm    // 16-bit load w/ disp.
0110_1mmm_snnn_iiii		st.w    Dm,@(disp,An)   Dm -> (disp*2 + An)                 // 16-bit store w/ disp.
	
1000_0000_siii_iiii		andi    #imm8,D0        D0 & (zero extend)imm -> D0         // and imm.
1000_0001_siii_iiii		ori     #imm8,D0        D0 | (zero extend)imm -> D0         // or imm.
1000_0010_siii_iiii		xori    #imm8,D0        D0 ^ (zero extend)imm -> D0         // xor imm.
1000_0011_siii_iiii		tsti    #imm8,D0        (D0 & (zero extend)imm == 0) -> T   // test imm.
1000_0100_siii_iiii		mului   #imm8,D0        D0 * (zero ext.)imm -> D0
1000_0101_siii_iiii		divui   #imm8,D0        D0 * (zero ext.)imm -> D0
1000_0110_siii_iiii		modi    #imm8,D0        D0 % (zero ext.)imm -> D0		
1000_1000_siii_iiii		muli    #imm8,D0        D0 * (sign ext.)imm -> D0
1000_1001_siii_iiii		divi    #imm8,D0        D0 / (sign ext.)imm -> D0
		
1000_1010_siii_iiii		bf      label           (T == 0) ? disp*2 + PC -> PC : nop  // branch false
1000_1011_siii_iiii		bt      label           (T == 1) ? disp*2 + PC -> PC : nop  // branch true
	
1001_0mmm_siii_iiii		ld.w    @(disp,PC),Dm   (disp*2 + PC) -> Dm                 // load 16-bit pc-relative
1010_0mmm_siii_iiii		lda     @(disp,PC),Am   (disp*2 + PC) -> Am                 // load address pc-relative
		
1011_0mmm_siii_iiii		addi    #imm8,Dm        Dm + (sign ext.)imm -> Dm           // add imm. to Dm
1011_1mmm_siii_iiii		addi    #imm8,Am        Am + (sign ext.)imm -> Am           // add imm. to Am
1100_0mmm_siii_iiii		seq     #imm8,Dm        (Dm == imm(sign ext.)) -> T         // set equal imm.
1100_1mmm_siii_iiii		movi    #imm8,Dm        imm (zero ext.) -> Dm               // 8-bit imm
	
1110_siii_iiii_iiii		bra     label           disp*2 + PC -> PC                   // branch
1111_siii_iiii_iiii		bsr     label           PC -> A0, disp*2 + PC -> PC         // branch subroutine
	
						**lvbr  Dm              Dm -> VBR                           // write VBR
						**svbr  Dm              VBR -> Dm                           // read VBR
						**trap  #imm            imm*2 + VBR -> PC, PC + 2 -> A0     // trap
	



